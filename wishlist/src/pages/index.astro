---
import items from "../data/items.json";
import Card from "../components/Card.astro";
import Header from "../components/Header.astro";

// SEO helpers
const siteUrl = "https://acoidaan.github.io/wishlist/";
function imgSrcFor(it) {
  const v = String(it.image || "");
  return /^https?:\/\//i.test(v)
    ? v
    : import.meta.env.BASE_URL + "assets/" + v.replace(/^\/+/, "");
}

// JSON-LD (ItemList con productos)
const itemList = items.map((it, i) => ({
  "@type": "Product",
  position: i + 1,
  name: it.title,
  image: imgSrcFor(it),
  url: it.url || siteUrl,
  offers:
    it.price != null
      ? {
          "@type": "Offer",
          priceCurrency: "EUR",
          price:
            typeof it.price === "number"
              ? it.price.toFixed(2)
              : String(it.price),
        }
      : undefined,
}));
const jsonLd = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  name: "aco’s wishlist",
  itemListElement: itemList,
};
---

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <!-- Mantienes tu título -->
  <title>aco’s wishlist</title>

  <!-- ✅ Descripción con tus keywords -->
  <meta
    name="description"
    content="aco’s wishlist (lista de deseos de Aco / Acoidan). Mi wishlist personal con auriculares, vinilos, perfumes, libros, teclados, tecnología y más."
  />
  <link rel="canonical" href={siteUrl} />

  <!-- Open Graph / redes -->
  <meta
    property="og:title"
    content="aco’s wishlist — Lista de deseos de Acoidan"
  />
  <meta
    property="og:description"
    content="Wishlist de Aco (Acoidan): selección personal de productos, precios e ideas."
  />
  <meta
    property="og:image"
    content={import.meta.env.BASE_URL + "assets/gift-box.svg"}
  />
  <meta property="og:url" content={siteUrl} />
  <meta property="og:type" content="website" />

  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary" />
  <meta
    name="twitter:title"
    content="aco’s wishlist — Lista de deseos de Acoidan"
  />
  <meta
    name="twitter:description"
    content="Wishlist de Aco / Acoidan con música, tecnología, moda y más."
  />
  <meta
    name="twitter:image"
    content={import.meta.env.BASE_URL + "assets/gift-box.svg"}
  />

  <!-- ✅ JSON-LD para buscadores -->
  <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
</head>

<Header />

<main>
  <!-- Texto oculto para SEO con tus frases objetivo (no afecta al diseño) -->
  <p class="sr-only">
    Esta es la lista de deseos de Aco, también llamada wishlist de Acoidan. Aquí
    recopilo productos que me gustan: auriculares, vinilos, libros, perfumes,
    teclados y tecnología.
  </p>

  <section class="grid" id="grid">
    {items.map((item) => <Card item={item} />)}
  </section>
</main>

<!-- cierre del grid -->

<div id="empty-state" class="empty-state" style="display: none;">
  <!-- código del artifact "Mensaje de no resultados" -->
</div>

<style is:global>
  :root {
    --bg: #0b0f14;
    --text: #e6e7eb;
    --muted: #b1b5bd;
    --card: #0f1620;
    --border: #1c2330;
    --accent: #8ab4ff;
    --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.35);
    --shadow-md: 0 3px 12px rgba(0, 0, 0, 0.45);
    --shadow-lg: 0 10px 28px rgba(0, 0, 0, 0.55);
  }
  @media (prefers-color-scheme: light) {
    :root {
      --bg: #f7f7f8;
      --text: #0b0f14;
      --muted: #555;
      --card: #fff;
      --border: #e4e6eb;
      --accent: #6ea8fe;
      --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.06);
      --shadow-md: 0 3px 6px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.15);
    }
  }
  html[data-theme="light"] {
    --bg: #f7f7f8;
    --text: #0b0f14;
    --muted: #555;
    --card: #fff;
    --border: #e4e6eb;
    --accent: #6ea8fe;
    --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.06);
    --shadow-md: 0 3px 6px rgba(0, 0, 0, 0.1);
    --shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.15);
  }
  html[data-theme="dark"] {
    --bg: #0b0f14;
    --text: #e6e7eb;
    --muted: #b1b5bd;
    --card: #0f1620;
    --border: #1c2330;
    --accent: #8ab4ff;
    --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.35);
    --shadow-md: 0 3px 12px rgba(0, 0, 0, 0.45);
    --shadow-lg: 0 10px 28px rgba(0, 0, 0, 0.55);
  }

  body {
    font-family:
      system-ui,
      -apple-system,
      "Segoe UI",
      Roboto,
      Arial,
      sans-serif;
    background: var(--bg);
    color: var(--text);
    margin: 0;
  }

  main {
    max-width: 1100px;
    margin: 0 auto;
  }

  /* Masonry estilo Pinterest (tu layout actual) */
  .grid {
    column-width: 260px;
    column-gap: 14px;
    padding: 18px;
  }
  .grid > * {
    break-inside: avoid;
    margin: 0 0 14px;
  }

  /* Utilidad: oculto visual (para SEO/accesibilidad) */
  .sr-only {
    position: absolute !important;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0 0 0 0);
    white-space: nowrap;
    border: 0;
  }
</style>

<script is:inline>
  function tokenize(q) {
    return String(q || "")
      .split(/[\s,]+/)
      .map((s) => s.trim().toLowerCase())
      .filter(Boolean);
  }

  function parsePrice(card) {
    const raw = card.getAttribute("data-price") || "";
    const num = parseFloat(raw.replace(",", "."));
    return isNaN(num) ? 0 : num;
  }

  function init() {
    const grid = document.getElementById("grid");
    const input = document.getElementById("wishlist-search");
    const select = document.getElementById("wishlist-sort");
    const emptyState = document.getElementById("empty-state");
    if (!grid) return;

    let cards = Array.from(grid.children);
    let currentQuery = "";
    let currentMaxPrice = Infinity;

    function highlightChips(terms) {
      const set = new Set(terms);
      document.querySelectorAll(".chip[data-tag]").forEach((chip) => {
        const t = (chip.dataset.tag || "").toLowerCase();
        chip.classList.toggle("active", set.has(t));
      });
    }

    function matches(card, terms) {
      if (terms.length === 0) return true;
      const haystack = (
        (card.getAttribute("data-title") || "") +
        " " +
        (card.getAttribute("data-tags") || "")
      ).toLowerCase();
      return terms.every((t) => haystack.includes(t));
    }

    function applyFilters() {
      const terms = tokenize(currentQuery);
      let visibleCount = 0;

      for (const card of cards) {
        const price = parsePrice(card);
        const matchesSearch = matches(card, terms);
        const matchesPrice = price <= currentMaxPrice;

        // Mostrar solo si cumple ambos filtros
        const shouldShow = matchesSearch && matchesPrice;
        card.style.display = shouldShow ? "" : "none";

        if (shouldShow) {
          visibleCount++;
          // Reiniciar animación para cards que se muestran
          card.style.animation = "none";
          // Force reflow
          void card.offsetWidth;
          card.style.animation = "";
        }
      }

      // Mostrar/ocultar mensaje de no resultados
      if (emptyState) {
        emptyState.style.display = visibleCount === 0 ? "block" : "none";
      }

      highlightChips(terms);
    }

    function applySort(order) {
      let sorted = [...cards];
      if (order === "asc") {
        sorted.sort((a, b) => parsePrice(a) - parsePrice(b));
      } else if (order === "desc") {
        sorted.sort((a, b) => parsePrice(b) - parsePrice(a));
      }
      for (const c of sorted) grid.appendChild(c);
    }

    // Eventos de búsqueda
    document.addEventListener("wishlist:query", (e) => {
      currentQuery = e.detail;
      applyFilters();
    });

    // Eventos de filtro de precio
    document.addEventListener("wishlist:pricefilter", (e) => {
      currentMaxPrice = e.detail;
      applyFilters();
    });

    // Ordenamiento
    select?.addEventListener("change", () => applySort(select.value));

    // Click en chips
    document.addEventListener("click", (e) => {
      const chip = e.target.closest(".chip[data-tag]");
      if (!chip) return;
      const term = (chip.dataset.tag || "").toLowerCase();
      const terms = new Set(tokenize(input?.value || ""));
      if (terms.has(term)) terms.delete(term);
      else terms.add(term);
      const next = Array.from(terms).join(" ");
      if (input) input.value = next;
      currentQuery = next;
      applyFilters();
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init);
  } else {
    init();
  }

  // Animar cards al cargar y al filtrar
  function animateVisibleCards() {
    const cards = document.querySelectorAll(".card");
    cards.forEach((card, index) => {
      if (card.style.display !== "none") {
        setTimeout(() => {
          card.classList.add("visible");
        }, index * 50); // 50ms entre cada card
      } else {
        card.classList.remove("visible");
      }
    });
  }

  // Ejecutar animación al cargar
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      setTimeout(animateVisibleCards, 100);
    });
  } else {
    setTimeout(animateVisibleCards, 100);
  }
</script>
